cmake_minimum_required(VERSION 2.20)
project(slcross CXX)

set(CMAKE_CXX_STANDARD 20)

option(SLCROSS_ENABLE_READING_GLSL "Should SLCross support parsing GLSL? Writing GLSL is always supported!" ON)
option(SLCROSS_ENABLE_WGSL "Should SLCross support WGSL?" ON)
option(SLCROSS_ENABLE_SLANG "Should SLCross support Slang?" ON)

if(SLCROSS_ENABLE_WGSL)
	include(cmake/FetchTint.cmake)
endif()
if(SLCROSS_ENABLE_SLANG)
	include(cmake/FetchSlang.cmake)
endif()
include(cmake/bundle.cmake)

if(SLCROSS_ENABLE_READING_GLSL)
	add_subdirectory(${tint_SOURCE_DIR}/third_party/glslang/src ${CMAKE_CURRENT_BINARY_DIR}/glslang EXCLUDE_FROM_ALL)
endif()
add_subdirectory(thirdparty/SPIRV-Cross EXCLUDE_FROM_ALL)

add_library(slcross slcross.cpp)
target_link_libraries(slcross PRIVATE SPIRV-Tools-opt SPIRV-Tools-link spirv-cross-cpp spirv-cross-glsl spirv-cross-hlsl spirv-cross-msl)
target_include_directories(slcross PUBLIC .)
add_library(slcross::slcross ALIAS slcross)
if(SLCROSS_ENABLE_READING_GLSL)
	target_compile_definitions(slcross PUBLIC SLCROSS_ENABLE_READING_GLSL)
	target_link_libraries(slcross PRIVATE glslang glslang::glslang-default-resource-limits)
endif()
if(SLCROSS_ENABLE_WGSL)
	target_compile_definitions(slcross PUBLIC SLCROSS_ENABLE_WGSL)
	target_link_libraries(slcross PRIVATE tint_api)
endif()
if(SLCROSS_ENABLE_SLANG)
	target_compile_definitions(slcross PUBLIC SLCROSS_ENABLE_SLANG)
	target_link_libraries(slcross PRIVATE slang)
	target_include_directories(slcross PRIVATE ${slang_SOURCE_DIR}/source)
endif()

# bundle_static_library(slcross slcross_bundled)
# add_library(slcross::bundled ALIAS slcross_bundled)